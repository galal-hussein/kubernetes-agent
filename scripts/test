#!/bin/bash
set -e

cleanup()
{
    local exit=$?
    kill $PID || true
    wait $PID || true
    exit $exit
}

cd $(dirname $0)/..

export SOCK=/var/run/dind.sock
export DOCKER_HOST=unix://${SOCK}
export CATTLE_DOCKER_USE_BOOT2DOCKER=true

ip link set dev eth0 mtu 1300

if grep overlay /proc/filesystems; then
    STORAGE=overlay
else
    STORAGE=aufs
fi
docker daemon -s $STORAGE -D -H $DOCKER_HOST >/tmp/docker.log 2>&1 &
PID=$!
trap cleanup EXIT

sleep 1

docker ps -q
for i in nginx:latest gcr.io/google_containers/hyperkube-amd64:v1.2.4 gcr.io/google_containers/etcd:2.2.1  gcr.io/google_containers/pause:2.0; do
    docker inspect $i >/dev/null 2>&1 || docker pull $i
done

IDS=$(docker ps -qa)
if [ -n "$IDS" ]; then
    docker kill $(docker ps -qa) || true
    docker rm -fv $(docker ps -qa) || true
fi

# Start up kubernetes
# docker load -i kubernetes-images.tar.gz #Uncomment for faster local wrap ci (if you have the tar)
#docker run --net=host -d --privileged -v ${SOCK}:/var/run/docker.sock gcr.io/google_containers/hyperkube:v1.2.4 /hyperkube kubelet --api_servers=http://localhost:8080 --v=2 --address=0.0.0.0 --enable_server --hostname_override=127.0.0.1 --config=/etc/kubernetes/manifests --allow-privileged=true
#docker run -d --net=host --privileged gcr.io/google_containers/hyperkube:v1.2.4
export ARCH=amd64 K8S_VERSION=v1.2.4
docker run -d \
    --volume=/:/rootfs:ro \
    --volume=/sys:/sys:rw \
    --volume=/var/lib/docker/:/var/lib/docker:rw \
    --volume=/var/lib/kubelet/:/var/lib/kubelet:rw \
    --volume=/var/run:/var/run:rw \
    --volume=/var/run/dind.sock:/var/run/docker.sock:rw \
    --net=host \
    --pid=host \
    --privileged \
    gcr.io/google_containers/hyperkube-${ARCH}:${K8S_VERSION} \
    /hyperkube kubelet \
        --hostname-override=127.0.0.1 \
        --api-servers=http://localhost:8080 \
        --config=/etc/kubernetes/manifests \
        --cluster-dns=10.0.0.10 \
        --cluster-domain=cluster.local \
        --allow-privileged --v=2
docker ps -a

echo "Waiting for kubernetes"
until $(curl --output /dev/null --silent --fail http://localhost:8080/api/v1/services); do
    printf '.'
    sleep 5
done

mkdir -p /etc/kubernetes/ssl/
cat > /etc/kubernetes/ssl/kubeconfig << EOF
apiVersion: v1
kind: Config
clusters:
- cluster:
    api-version: v1
    insecure-skip-tls-verify: true
    server: "http://localhost:8080"
  name: "Default"
contexts:
- context:
    cluster: "Default"
    user: "Default"
  name: "Default"
current-context: "Default"
users:
- name: "Default"
  user:
    token: "test"
EOF

for pkg in $(go list ./...); do
    if [[ $pkg != *"vendor"* ]]; then
        go test -v $pkg
    fi
done

echo OK
